{"ast":null,"code":"var _jsxFileName = \"/home/abdul/Development/phase3/movie-app/src/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport movieTrailer from 'movie-trailer';\nimport { Link } from \"react-router-dom\";\nimport Comments from './Comments';\nimport YouTube from 'react-youtube';\nimport \"./Row.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow,\n  categoryLink,\n  categoryComment\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [movieClick, setMovieClick] = useState(false);\n  const [movieId, setMovieId] = useState(0);\n  const [displayComments, setDisplayComments] = useState(false);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  const [comments, setComments] = useState([]);\n  const [displayMovieDetails, setDisplayMovieDetails] = useState(false);\n  useEffect(() => {\n    fetch(`${fetchUrl}`).then(resp => resp.json()).then(data => setMovies(data));\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  function handleAddComment(comment) {\n    // debugger;\n    setComments([...comments, comment]);\n  }\n\n  const baseImageUrl = \"https://image.tmdb.org/t/p/original/\";\n\n  function handleClick(moviename) {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer(moviename || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get(\"v\"));\n      }).catch(() => alert(\" Sorry, No trailer found for this movie\"));\n    }\n\n    setDisplayComments(false);\n  }\n\n  function handleReview(id) {\n    movieId === id && setDisplayComments(!displayComments);\n  }\n\n  function handleImageClick(movie_id) {\n    setMovieId(movie_id);\n    setMovieClick(!movieClick);\n  }\n\n  function viewComments() {\n    fetch(`http://localhost:9292/${categoryComment}`).then(resp => resp.json()).then(data => {\n      setComments(data);\n      console.log(data);\n    });\n    setDisplayMovieDetails(!displayMovieDetails);\n  } // console.log(getMovie)\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row__posters\",\n        children: movies.map(movie => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n            src: `${baseImageUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n            alt: movie.name,\n            onClick: () => handleImageClick(movie.id)\n          }, movie.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 29\n          }, this), movieId === movie.id && movieClick && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"mov__button\",\n              onClick: () => handleClick((movie === null || movie === void 0 ? void 0 : movie.original_name) || (movie === null || movie === void 0 ? void 0 : movie.title) || (movie === null || movie === void 0 ? void 0 : movie.name)),\n              children: `Play ${(movie === null || movie === void 0 ? void 0 : movie.original_name) || (movie === null || movie === void 0 ? void 0 : movie.title) || (movie === null || movie === void 0 ? void 0 : movie.name)} Trailer`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 70\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"mov__button\",\n              onClick: () => handleReview(movie.id),\n              children: \"Leave Review\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 33\n            }, this), displayComments && movie.id === movieId && /*#__PURE__*/_jsxDEV(Comments, {\n              comments: comments,\n              handleAddComment: handleAddComment,\n              categoryComment: categoryComment,\n              style: {\n                marginTop: \"10rem\"\n              },\n              mov_id: movieId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 77\n            }, this), /*#__PURE__*/_jsxDEV(Link, {\n              to: `${categoryLink}/${movie.id}`,\n              href: `${categoryLink}/${movie.id}`,\n              className: \"mov__button\",\n              style: {\n                textDecoration: \"none\",\n                paddingTop: \"1rem\"\n              },\n              onClick: viewComments,\n              children: \"View movie Details and Reviews\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 33\n            }, this), \" \"]\n          }, void 0, true)]\n        }, void 0, true))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n        videoId: trailerUrl,\n        opts: opts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"ztel8+luA5XpYjTfSBnNSc5haEw=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/home/abdul/Development/phase3/movie-app/src/Row.js"],"names":["React","useState","useEffect","movieTrailer","Link","Comments","YouTube","Row","title","fetchUrl","isLargeRow","categoryLink","categoryComment","movies","setMovies","movieClick","setMovieClick","movieId","setMovieId","displayComments","setDisplayComments","trailerUrl","setTrailerUrl","comments","setComments","displayMovieDetails","setDisplayMovieDetails","fetch","then","resp","json","data","opts","height","width","playerVars","autoplay","handleAddComment","comment","baseImageUrl","handleClick","moviename","url","urlParams","URLSearchParams","URL","search","get","catch","alert","handleReview","id","handleImageClick","movie_id","viewComments","console","log","map","movie","poster_path","backdrop_path","name","original_name","marginTop","textDecoration","paddingTop"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport movieTrailer from 'movie-trailer'\nimport { Link } from \"react-router-dom\"\nimport Comments from './Comments';\nimport YouTube from 'react-youtube';\nimport \"./Row.css\";\n\nfunction Row({ title, fetchUrl, isLargeRow, categoryLink, categoryComment }) {\n    const [movies, setMovies] = useState([])\n    const [movieClick, setMovieClick] = useState(false)\n    const [movieId, setMovieId] = useState(0);\n    const [displayComments, setDisplayComments] = useState(false)\n    const [trailerUrl, setTrailerUrl] = useState(\"\")\n    const [comments, setComments] = useState([])\n    const [displayMovieDetails, setDisplayMovieDetails] = useState(false)\n\n\n    useEffect(() => {\n        fetch(`${fetchUrl}`)\n            .then(resp => resp.json())\n            .then(data => setMovies(data))\n    }, [fetchUrl])\n\n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {\n            autoplay: 1,\n        },\n    }\n\n    function handleAddComment(comment) {\n        // debugger;\n        setComments([...comments, comment])\n    }\n    const baseImageUrl = \"https://image.tmdb.org/t/p/original/\"\n\n    function handleClick(moviename) {\n        if (trailerUrl) {\n            setTrailerUrl(\"\")\n        }\n        else {\n            movieTrailer(moviename || \"\")\n                .then(url => {\n                    const urlParams = new URLSearchParams(new URL(url).search)\n                    setTrailerUrl(urlParams.get(\"v\"))\n                }).catch(() => alert(\" Sorry, No trailer found for this movie\"));\n        }\n        setDisplayComments(false)\n    }\n\n    function handleReview(id) {\n        movieId === id && setDisplayComments(!displayComments)\n    }\n    function handleImageClick(movie_id) {\n        setMovieId(movie_id)\n        setMovieClick(!movieClick)\n    }\n\n    function viewComments() {\n        fetch(`http://localhost:9292/${categoryComment}`)\n            .then(resp => resp.json())\n            .then(data => {\n                setComments(data)\n                console.log(data)\n            })\n        setDisplayMovieDetails(!displayMovieDetails)\n    }\n\n    // console.log(getMovie)\n    return (\n        <div>\n            <div className=\"row\">\n                <h2>{title}</h2>\n                <div className=\"row__posters\">\n                    {movies.map(movie => (\n                        <>\n                            <img key={movie.id}\n                                className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                                src={`${baseImageUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\n                                alt={movie.name}\n                                onClick={() => handleImageClick(movie.id)}\n                            />\n                            {movieId === movie.id && movieClick && <><button className=\"mov__button\" onClick={() => handleClick(movie?.original_name || movie?.title || movie?.name)}>{`Play ${movie?.original_name || movie?.title || movie?.name} Trailer`}</button>\n                                <button className=\"mov__button\" onClick={() => handleReview(movie.id)}>Leave Review</button>\n                                {displayComments && movie.id === movieId && <Comments comments={comments} handleAddComment={handleAddComment} categoryComment={categoryComment} style={{ marginTop: \"10rem\" }} mov_id={movieId} />}\n                                <Link to={`${categoryLink}/${movie.id}`} href={`${categoryLink}/${movie.id}`} className=\"mov__button\" style={{ textDecoration: \"none\", paddingTop: \"1rem\" }} onClick={viewComments}>\n                                    View movie Details and Reviews</Link> </>}\n\n\n                        </>\n                    ))}\n                </div>\n                {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n            </div >\n        </div >\n    )\n}\n\nexport default Row\n\n"]},"metadata":{},"sourceType":"module"}